{"version":3,"sources":["images/voltorb_marker.svg","images/voltorb.svg","services/space.ts","components/board/BoardSpace.tsx","services/helpers.ts","services/board.ts","components/board/BoardSpacesSummary.tsx","components/board/BoardRow.tsx","components/board/GameBoard.tsx","services/game.ts","components/VoltorbFlip.tsx","components/Button.tsx","components/GameStateOverlay.tsx","components/sidebar/GameScore.tsx","components/sidebar/GameDifficulty.tsx","components/sidebar/GameInputMode.tsx","components/sidebar/Sidebar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SpaceTypeEnum","SpaceStateEnum","SpaceMarkersEnum","Space","type","state","Hidden","markers","this","Flipped","marking","includes","splice","indexOf","push","Two","BoardSpaceMarker","marker","className","toString","BoardSpaceMarkerContent","Voltorb","src","VoltorbMarker","alt","BoardSpaceFrontContent","space","BoardSpace","handleSpaceClick","onClick","e","data-testid","map","getColumnFromBoard","column","spaces","row","BoardStatusEnum","BoardSpacesSummary","reduce","total","totalOfMultipliers","countOfVoltorbs","BoardRow","rowIndex","columnIndex","key","GameBoard","board","id","index","__","GameStateEnum","Board","difficulty","_difficulty","width","height","numberOfMultipliers","numberOfVoltorbs","totalNumberOfSpaces","numberOfOneSpaces","random","generateSpaces","toReturn","elements","seededElements","col","buildMultipliers","buildVoltorbs","buildOneSpaces","ShuffleSeed","substring","Array","fill","Three","One","flat","allSpaces","filter","isMultiplier","isFlipped","flippedSpaces","flippedMultiplierSpaces","isBoardLost","Lost","isBoardComplete","Complete","Active","undefined","find","length","allMultiplierSpaces","InputModeEnum","Game","seed","randomSeed","currentRoundPoints","totalPoints","Playing","flippedMultipliersCount","seedrandom","buildSpaces","getCurrentRoundPoints","checkBoard","startIntermission","RoundLost","handleLostRound","handleWonRound","startRound","Intermission","Math","Button","children","handleOnClick","Overlay","show","GameIntermissionOverlay","handleNextRoundClick","Fragment","GameRoundLostOverlay","handleRestartClick","GameStateOverlay","showOverlay","gameState","GameScore","totalScore","currentRoundScore","highScore","end","duration","GameDifficulty","GameInputMode","currentInputMode","handleInputModeChange","MarkingVoltorb","MarkingOne","MarkingTwo","MarkingThree","Flipping","Sidebar","currentPoints","href","target","rel","localStorage","window","VoltorbFlip","useState","game","setGame","setShowOverlay","inputMode","setInputMode","parseInt","getItem","setHighScore","handleCardMark","mark","valueOf","Object","create","handleCardFlip","score","flip","updateBoardState","setItem","setTimeout","forEach","resetGame","nextRound","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gWCA/BC,EAOAC,EAKAC,E,wEAZAF,O,qBAAAA,I,aAAAA,I,aAAAA,I,kBAAAA,M,cAOAC,O,mBAAAA,I,sBAAAA,M,cAKAC,O,qBAAAA,I,aAAAA,I,aAAAA,I,kBAAAA,M,SAqCGC,E,WAzBb,WAAYC,GAAsB,yBAJlCA,UAIiC,OAHjCC,MAAQJ,EAAeK,OAGU,KAFjCC,QAA8B,GAG5BC,KAAKJ,KAAOA,E,mDAIZI,KAAKH,MAAQJ,EAAeQ,U,2BAGlBC,GACPF,KAAKD,QAAQI,SAASD,GACvBF,KAAKD,QAAQK,OAAOJ,KAAKD,QAAQM,QAAQH,GAAU,GAEnDF,KAAKD,QAAQO,KAAKJ,K,kCAKpB,OAAOF,KAAKH,QAAUJ,EAAeQ,U,qCAIrC,OAAOD,KAAKJ,MAAQF,EAAiBa,Q,sCCdnCC,G,MAAmB,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACvB,yBAAKC,UAAS,kCAA6BD,EAAOE,aAC9CC,EAAwBH,MAGxBG,EAA0B,SAACH,GAC/B,OAAOA,GACL,KAAKf,EAAiBmB,QACpB,OAAO,yBAAKC,IAAKC,IAAeC,IAAI,mBACtC,QACE,OAAO,8BAAQP,KAIfQ,EAAyB,SAACC,GAC9B,OAAOA,EAAMtB,MACX,KAAKJ,EAAcqB,QACjB,OACE,yBAAKH,UAAU,gBAAe,8BAAM,yBAAKI,IAAKD,IAASG,IAAI,oBAE/D,QACE,OACE,yBAAKN,UAAU,mBAAkB,8BAAQQ,EAAMtB,SAKxCuB,EA7CI,SAAC,GAAD,IAAGD,EAAH,EAAGA,MAAOE,EAAV,EAAUA,iBAAV,OACjB,yBAAKV,UAAS,2BAAsBQ,EAAMrB,QAAUJ,EAAeK,OAAS,SAAW,YACrF,yBAAKY,UAAU,eACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,YAAYW,QAAS,SAACC,GAAD,OAAOF,EAAiBF,IAAQK,cAAY,kBAC9E,yBAAKb,UAAU,WACXQ,EAAMnB,QAAQyB,KAAI,SAACf,GAAD,OAA8B,kBAAC,EAAD,CAAkBA,OAAQA,SAGhF,yBAAKC,UAAU,cACXQ,EAAMrB,QAAUJ,EAAeQ,SAC/BgB,EAAuBC,QCd5B,SAASO,EAAmBC,EAAgBC,GACjD,OAAOA,EAAOH,KAAI,SAAAI,GAAG,OAAIA,EAAIF,M,UCPnBG,ECqBGC,EAbY,SAAC,GAAD,IAAGH,EAAH,EAAGA,OAAH,OACzB,yBAAKjB,UAAU,uBACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,gCACb,yBAAKA,UAAU,gCFdhB,SAA4BiB,GACjC,OAAOA,EAAOI,QAAO,SAACC,EAAOd,GAAR,OAAkBA,EAAMtB,OAASJ,EAAcqB,QAAUmB,EAAQd,EAAMtB,KAAOoC,IAAO,GEapDC,CAAmBN,IACnE,yBAAKjB,UAAU,6BACb,yBAAKI,IAAKD,IAASG,IAAI,YACvB,8BFbH,SAAyBW,GAC9B,OAAOA,EAAOI,QAAO,SAACC,EAAOd,GAAR,OAAkBA,EAAMtB,OAASJ,EAAcqB,QAAUmB,EAAQ,EAAIA,IAAO,GEYjFE,CAAgBP,SCAnBQ,G,MANE,SAAC,GAAD,IAAGR,EAAH,EAAGA,OAAQP,EAAX,EAAWA,iBAAkBgB,EAA7B,EAA6BA,SAA7B,OACf,yBAAK1B,UAAU,YACXiB,EAAOH,KAAI,SAACN,EAAOmB,GAAR,OAAwB,kBAAC,EAAD,CAAYC,IAAG,gBAAWF,EAAX,YAAuBC,GAAenB,MAAOA,EAAOE,iBAAkBA,OAC1H,kBAAC,EAAD,CAAoBO,OAAQA,OCejBY,G,MAhBG,SAAC,GAAD,IAAYZ,EAAZ,EAAGa,MAASb,OAAUP,EAAtB,EAAsBA,iBAAtB,OAChB,yBAAKqB,GAAG,SAEJd,EAAOH,KAAI,SAACI,EAAcc,GAAf,OACT,kBAAC,EAAD,CAAUJ,IAAG,mBAAcI,GAASf,OAAQC,EAAKR,iBAAkBA,EAAkBgB,SAAUM,OAGnG,yBAAKhC,UAAU,iBAEXiB,EAAOH,KAAI,SAACmB,EAASN,GAAV,OACT,kBAAC,EAAD,CAAoBC,IAAG,+BAA0BD,GAAeV,OAAQF,EAAmBY,EAAaV,Y,2CHrBtGE,O,mBAAAA,I,eAAAA,I,wBAAAA,M,SIAAe,EJ2HGC,E,WA/Gb,WAAYC,GAAqB,IAAD,gCALhCC,iBAKgC,OAJhCpB,YAIgC,OAHhCqB,MAAQ,EAGwB,KAFhCC,OAAS,EAEuB,KAyGxBC,oBAAsB,kBAAM,EAAKJ,WAAa,GAzGtB,KA0GxBK,iBAAmB,kBAAM,EAAKL,YAAc,EAAI,GAAM,EAAKA,WAAa,GA1GhD,KA2GxBM,oBAAsB,kBAAM,EAAKJ,MAAQ,EAAKC,QA3GtB,KA4GxBI,kBAAoB,kBAAM,EAAKD,uBAAyB,EAAKF,sBAAwB,EAAKC,qBA3GhGnD,KAAK+C,YAAcD,EACnB9C,KAAK2B,OAAS,G,wDAKG2B,GACjBtD,KAAK2B,OAAS3B,KAAKuD,eAAeD,K,qCAGdA,GAIpB,IAHA,IAAIE,EAAW,GACTC,EAAWzD,KAAK0D,eAAeJ,GAE7B1B,EAAM,EAAGA,EAAM5B,KAAKiD,OAAQrB,IAAO,CACzC4B,EAASlD,KAAK,IACd,IAAI,IAAIqD,EAAM,EAAGA,EAAM3D,KAAKgD,MAAOW,IACjCH,EAAS5B,GAAK+B,GAAOF,EAAW7B,EAAM5B,KAAKgD,MAASW,GAGxD,OAAOH,I,qCAGaF,GACpB,IAAIG,EAAiB,sBAChBzD,KAAK4D,iBAAiBN,IADN,YAEhBtD,KAAK6D,iBAFW,YAGhB7D,KAAK8D,mBAGV,OADAL,EAAWM,UAAoBN,EAAUH,IAAS3C,SAAS,IAAIqD,UAAU,M,uCAIlDV,GACvB,OAAOW,MAAMjE,KAAKkD,uBAAuBgB,KAAK,GAAG1C,KAAI,WACnD,OAAG8B,IAAW,GACL,IAAI3D,EAAMH,EAAce,KAExB,IAAIZ,EAAMH,EAAc2E,Y,sCAMnC,OAAOF,MAAMjE,KAAKmD,oBAAoBe,KAAK,GAAG1C,KAAI,kBAAM,IAAI7B,EAAMH,EAAcqB,c,uCAIhF,OAAOoD,MAAMjE,KAAKqD,qBAAqBa,KAAK,GAAG1C,KAAI,kBAAM,IAAI7B,EAAMH,EAAc4E,U,kCAMjF,OAAOpE,KAAK2B,OAAO0C,S,4CAInB,OAAOrE,KAAKsE,YAAYC,QAAO,SAACrD,GAAD,OAAkBA,EAAMsD,oB,sCAIvD,OAAOxE,KAAKsE,YAAYC,QAAO,SAACrD,GAAD,OAAkBA,EAAMuD,iB,gDAIvD,OAAOzE,KAAK0E,gBAAgBH,QAAO,SAACrD,GAAD,OAAkBA,EAAMsD,oB,8CAI3D,OAAOxE,KAAK2E,0BAA0B5C,QAAO,SAACC,EAAOd,GAAR,OAAkBc,EAAQd,EAAMtB,OAAM,K,mCAcnF,OAAGI,KAAK4E,cACC/C,EAAgBgD,KACf7E,KAAK8E,kBACNjD,EAAgBkD,SAGlBlD,EAAgBmD,S,oCAIvB,YAAsFC,IAA/EjF,KAAK0E,gBAAgBQ,MAAK,SAAChE,GAAD,OAAWA,EAAMtB,OAASJ,EAAcqB,a,wCAKzE,OADsBb,KAAK2E,0BACNJ,QAAO,SAACrD,GAAD,OAAWA,EAAMrB,QAAUJ,EAAeQ,WAASkF,SAAWnF,KAAKoF,sBAAsBD,S,iCAzBrH,OAAOnF,KAAK+C,a,aAGQD,GACpB9C,KAAK+C,YAAcD,M,eI3FXF,O,qBAAAA,I,yBAAAA,I,gCAAAA,M,SCMAyC,EDuFGC,E,WA9Eb,aAAe,yBARf9C,WAQc,OAPd+C,KAAevF,KAAKwF,aAON,KANdlC,YAMc,OALdmC,mBAA6B,EAKf,KAJdC,YAAsB,EAIR,KAHd7F,MAAuB+C,EAAc+C,QAGvB,KAFdC,wBAAkC,EAIhC5F,KAAKsD,OAASuC,IAAW7F,KAAKuF,MAC9BvF,KAAKwC,MAAQ,IAAIK,EAAM,GACvB7C,KAAKwC,MAAMsD,YAAY9F,KAAKsD,Q,+DAW5B,OAHAtD,KAAKyF,mBAAqBzF,KAAKwC,MAAMuD,wBACrC/F,KAAK4F,wBAA0B5F,KAAKwC,MAAMmC,0BAA0BQ,OAE7DnF,KAAKwC,MAAMwD,cAChB,KAAKnE,EAAgBmD,OACnBhF,KAAKH,MAAQ+C,EAAc+C,QAC3B,MACF,KAAK9D,EAAgBkD,SACnB/E,KAAKiG,oBACL,MACF,KAAKpE,EAAgBgD,KACnB7E,KAAKH,MAAQ+C,EAAcsD,UAI/B,OAAOlG,KAAKH,Q,mCAIZG,KAAKwC,MAAMsD,YAAY9F,KAAKsD,QAC5BtD,KAAKH,MAAQ+C,EAAc+C,U,kCAIxB3F,KAAKH,QAAU+C,EAAcsD,UAC9BlG,KAAKmG,kBAELnG,KAAKoG,iBAEPpG,KAAKqG,e,wCAI+B,IAAjCrG,KAAK4F,wBACN5F,KAAKwC,MAAMM,WAAa,EAChB9C,KAAK4F,yBAA2B5F,KAAKwC,MAAMM,aACnD9C,KAAKwC,MAAMM,WAAa9C,KAAK4F,yBAE/B5F,KAAKyF,mBAAqB,I,uCAIvBzF,KAAKwC,MAAMM,WAAa,IACzB9C,KAAKwC,MAAMM,YAAc,K,kCAK3B9C,KAAKuF,KAAOvF,KAAKwF,aACjBxF,KAAKsD,OAASuC,IAAW7F,KAAKuF,MAC9BvF,KAAKwC,MAAMM,WAAa,EACxB9C,KAAKyF,mBAAqB,EAC1BzF,KAAK0F,YAAc,I,0CAInB1F,KAAKH,MAAQ+C,EAAc0D,aAC3BtG,KAAK0F,aAAe1F,KAAKyF,mBACzBzF,KAAKyF,mBAAqB,I,mCAI1B,OAAOc,KAAKjD,SAAS3C,SAAS,IAAIqD,UAAU,O,KE/EjCwC,G,MAHA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAU7G,EAAb,EAAaA,KAAMc,EAAnB,EAAmBA,UAAWgG,EAA9B,EAA8BA,cAA9B,OACb,4BAAQhG,UAAS,kBAAad,EAAb,YAAqBc,GAAaW,QAASqF,GAAiBD,KCNzEE,G,MAAU,SAAC,GAAD,IAAGF,EAAH,EAAGA,SAAUG,EAAb,EAAaA,KAAb,IAAmBlG,iBAAnB,MAA6B,GAA7B,SACd,yBAAKA,UAAS,kBAAaA,EAAb,YAA0BkG,EAAO,OAAS,KACtD,yBAAKlG,UAAU,gBACX+F,MAIFI,EAA0B,SAAC,GAAD,IAAGC,EAAH,EAAGA,qBAAH,OAC9B,kBAAC,IAAMC,SAAP,KACE,+CACA,kBAAC,EAAD,CAAQL,cAAeI,EAAsBlH,KAAK,WAAlD,gBAGEoH,EAAuB,SAAC,GAAD,IAAGF,EAAH,EAAGA,qBAAsBG,EAAzB,EAAyBA,mBAAzB,OAC3B,kBAAC,IAAMF,SAAP,KACE,iDACA,yBAAKrG,UAAU,YACb,kBAAC,EAAD,CAAQgG,cAAeO,EAAoBrH,KAAK,WAAhD,WACA,kBAAC,EAAD,CAAQ8G,cAAeI,EAAsBlH,KAAK,WAAlD,iBAyBSsH,EAdU,SAAC,GAAqG,IAAnGC,EAAkG,EAAlGA,YAAaC,EAAqF,EAArFA,UAAWN,EAA0E,EAA1EA,qBAAsBG,EAAoD,EAApDA,mBACxE,OAAOG,GACL,KAAKxE,EAAc0D,aACjB,OAAO,kBAAC,EAAD,CAASM,KAAMO,GAAa,kBAAC,EAAD,CAAyBL,qBAAsBA,KAEpF,KAAKlE,EAAcsD,UACjB,OAAO,kBAAC,EAAD,CAASU,KAAMO,EAAazG,UAAU,gBAAe,kBAAC,EAAD,CAAsBoG,qBAAsBA,EAAsBG,mBAAoBA,KAEpJ,QACE,OAAO,O,iBCLEI,G,MA5BG,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,kBAAmBC,EAAlC,EAAkCA,UAAlC,OAChB,yBAAK9G,UAAU,aACb,yBAAKA,UAAU,2BACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,QAAf,gBACA,yBAAKA,UAAU,SACb,kBAAC,IAAD,CAAS+G,IAAKF,EAAmBG,SAAU,QAIjD,yBAAKhH,UAAU,yBACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,QAAf,gBACA,yBAAKA,UAAU,SACb,kBAAC,IAAD,CAAS+G,IAAKH,EAAYI,SAAU,OAI1C,yBAAKhH,UAAU,6BACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,QAAf,cACA,yBAAKA,UAAU,SACb,kBAAC,IAAD,CAAS+G,IAAKD,EAAWE,SAAU,YCpB9BC,G,MALQ,SAAC,GAAD,IAAG7E,EAAH,EAAGA,WAAH,OACrB,yBAAKpC,UAAU,kBACb,iDAAuBoC,MC+BZ8E,G,MA7BO,SAAC,GAAD,IAAGC,EAAH,EAAGA,iBAAkBC,EAArB,EAAqBA,sBAArB,OACpB,yBAAKpH,UAAU,iBACb,yBAAKA,UAAU,WACb,yBACEA,UAAS,yBAAoBmH,IAAqBxC,EAAc0C,eAAiB,WAAa,IAC9F1G,QAAS,kBAAMyG,EAAsBzC,EAAc0C,kBACjD,yBAAKjH,IAAKC,IAAeC,IAAI,oBAEjC,yBACEN,UAAS,0BAAqBmH,IAAqBxC,EAAc2C,WAAa,WAAa,IAC3F3G,QAAS,kBAAMyG,EAAsBzC,EAAc2C,cACjD,oCAEJ,yBACEtH,UAAS,0BAAqBmH,IAAqBxC,EAAc4C,WAAa,WAAa,IAC3F5G,QAAS,kBAAMyG,EAAsBzC,EAAc4C,cACjD,oCAEJ,yBACEvH,UAAS,4BAAuBmH,IAAqBxC,EAAc6C,aAAe,WAAa,IAC/F7G,QAAS,kBAAMyG,EAAsBzC,EAAc6C,gBACjD,qCAGN,yBAAKxH,UAAS,eAAUmH,IAAqBxC,EAAc8C,SAAW,WAAa,IAAM9G,QAAS,kBAAMyG,EAAsBzC,EAAc8C,YAC1I,0CCGSC,G,MAnBC,SAAC,GAAD,IAAGtF,EAAH,EAAGA,WAAY4C,EAAf,EAAeA,YAAa2C,EAA5B,EAA4BA,cAAeb,EAA3C,EAA2CA,UAAWM,EAAtD,EAAsDA,sBAAuBD,EAA7E,EAA6EA,iBAAkBZ,EAA/F,EAA+FA,mBAA/F,OACd,yBAAKvG,UAAU,WACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,CAAgBoC,WAAYA,IAC5B,kBAAC,EAAD,CAAWwE,WAAY5B,EAAa6B,kBAAmBc,EAAeb,UAAWA,KAEnF,yBAAK9G,UAAU,UACb,kBAAC,EAAD,CAAeoH,sBAAuBA,EAAuBD,iBAAkBA,IAC/E,yBAAKnH,UAAU,YACb,kBAAC,EAAD,CAAQgG,cAAeO,EAAoBrH,KAAK,aAAhD,qBAIN,8CACa,uBAAG0I,KAAK,6BAA6BC,OAAO,SAASC,IAAI,uBAAzD,WADb,MAC0G,uBAAGF,KAAK,6CAA6CC,OAAO,SAASC,IAAI,uBAAzE,c,gBN1BlGnD,O,mCAAAA,I,2BAAAA,I,2BAAAA,I,+BAAAA,I,wBAAAA,M,KAQZ,IAAMoD,EAAeC,OAAOD,aA+FbE,EArFK,WAAO,IAAD,EACAC,oBAAS,kBAAM,IAAItD,KADnB,mBACjBuD,EADiB,KACXC,EADW,OAEcF,oBAAS,GAFvB,mBAEjBzB,EAFiB,KAEJ4B,EAFI,OAGUH,mBAASvD,EAAc8C,UAHjC,mBAGjBa,EAHiB,KAGNC,EAHM,OAIUL,mBAX3BM,SAAST,EAAaU,QAAQ,uBAAyB,MAOtC,mBAIjB3B,EAJiB,KAIN4B,EAJM,KAclBC,EAAiB,SAACnI,GACtBA,EAAMoI,KAAKN,EAAUO,WACrBT,EAAQU,OAAOC,OAAOZ,KAGlBa,EAAiB,SAACxI,GAvBI,IAACyI,EAwBxBzI,EAAMrB,QAAUJ,EAAeK,QAAU+I,EAAKhJ,QAAU+C,EAAc+C,UACvEzE,EAAM0I,OACNf,EAAKgB,mBAEFhB,EAAKhJ,QAAU+C,EAAc+C,UAC3BkD,EAAKnD,YAAc8B,IA7BCmC,EA8BCd,EAAKnD,YA7BnC+C,EAAaqB,QAAQ,qBAAsBH,EAAMhJ,YA8BzCyI,EAAaP,EAAKnD,cAEpBqE,YAAW,WACTlB,EAAKrG,MAAM8B,YAAY0F,SAAQ,SAAC9I,GAAD,OAAkBA,EAAM0I,UACvDd,EAAQU,OAAOC,OAAOZ,MACrB,KAEHkB,YAAW,WACThB,GAAe,KACd,MAELD,EAAQU,OAAOC,OAAOZ,MAIpB5B,EAAqB,WACzB4B,EAAKoB,YACLpB,EAAKxC,aACLyC,EAAQU,OAAOC,OAAOZ,IACtBE,GAAe,IAajB,OACE,yBAAKrI,UAAU,eACXmI,EAAKrG,OACL,kBAAC,IAAMuE,SAAP,KACE,yBAAKrG,UAAU,aACb,kBAAC,EAAD,CAAW8B,MAAOqG,EAAKrG,MAAOpB,iBA1Df,SAACF,GACrB8H,IAAc3D,EAAc8C,SAC7BuB,EAAexI,GAEfmI,EAAenI,MAuDT,kBAAC,EAAD,CACEkG,UAAWyB,EAAKhJ,MAChBoH,mBAAoBA,EACpBH,qBAnBiB,WAC3B+B,EAAKqB,YACLpB,EAAQU,OAAOC,OAAOZ,IACtBE,GAAe,IAiBL5B,YAAaA,KAEjB,kBAAC,EAAD,CACErE,WAAY+F,EAAKrG,MAAMM,WACvB4C,YAAamD,EAAKnD,YAClB2C,cAAeQ,EAAKpD,mBACpB+B,UAAWA,EACXM,sBArBoB,SAACkB,GAC7BC,EAAaD,IAqBLnB,iBAAkBmB,EAClB/B,mBAAoBA,OO9FjBkD,MARf,WACE,OACE,yBAAKzJ,UAAU,OACb,kBAAC,EAAD,QCKc0J,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4313aa6e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/voltorb_marker.99f58e1e.svg\";","module.exports = __webpack_public_path__ + \"static/media/voltorb.636f6788.svg\";","export enum SpaceTypeEnum {\n  Voltorb,\n  One,\n  Two,\n  Three\n}\n\nexport enum SpaceStateEnum {\n  Hidden,\n  Flipped\n}\n\nexport enum SpaceMarkersEnum {\n  Voltorb,\n  One,\n  Two,\n  Three\n}\n\nclass Space {\n  type: SpaceTypeEnum;\n  state = SpaceStateEnum.Hidden;\n  markers: SpaceMarkersEnum[] = [];\n\n  constructor(type: SpaceTypeEnum) {\n    this.type = type;\n  }\n\n  public flip(): void {\n    this.state = SpaceStateEnum.Flipped;\n  }\n\n  public mark(marking: SpaceMarkersEnum): void {\n    if(this.markers.includes(marking)) {\n      this.markers.splice(this.markers.indexOf(marking), 1);\n    } else {\n      this.markers.push(marking);\n    }\n  }\n\n  public isFlipped(): boolean {\n    return this.state === SpaceStateEnum.Flipped;\n  }\n\n  public isMultiplier(): boolean {\n    return this.type >= SpaceMarkersEnum.Two;\n  }\n}\n\nexport default Space;","import React from 'react';\nimport Space, { SpaceStateEnum, SpaceTypeEnum, SpaceMarkersEnum } from '../../services/space';\n\nimport VoltorbMarker from '../../images/voltorb_marker.svg';\nimport Voltorb from '../../images/voltorb.svg';\n\nimport './BoardSpace.scss';\n\ninterface SpaceInterface {\n  space: Space;\n  handleSpaceClick: (space: Space) => void;\n}\n\nconst BoardSpace = ({ space, handleSpaceClick }: SpaceInterface) =>\n  <div className={`space boardSpace ${space.state === SpaceStateEnum.Hidden ? 'hidden' : 'flipped' }`}>\n    <div className=\"spaceBorder\">\n      <div className=\"spaceInner\">\n        <div className=\"spaceBack\" onClick={(e) => handleSpaceClick(space)} data-testid=\"boardSpaceBack\">\n          <div className=\"markers\">\n            { space.markers.map((marker: SpaceMarkersEnum) => <BoardSpaceMarker marker={marker} />) }\n          </div>\n        </div>\n        <div className=\"spaceFront\">\n          { space.state === SpaceStateEnum.Flipped &&\n            BoardSpaceFrontContent(space)\n          }\n        </div>\n      </div>\n    </div>\n  </div>\n\nconst BoardSpaceMarker = ({ marker }: { marker: SpaceMarkersEnum }) =>\n  <div className={`boardSpaceMarker marker_${marker.toString()}`}>\n    { BoardSpaceMarkerContent(marker) }\n  </div>\n\nconst BoardSpaceMarkerContent = (marker: SpaceMarkersEnum) => {\n  switch(marker) {\n    case SpaceMarkersEnum.Voltorb:\n      return <img src={VoltorbMarker} alt=\"Voltorb marker\" />\n    default:\n      return <span>{ marker }</span>\n  }\n}\n\nconst BoardSpaceFrontContent = (space: Space) => {\n  switch(space.type) {\n    case SpaceTypeEnum.Voltorb:\n      return (\n        <div className=\"spaceVoltorb\"><span><img src={Voltorb} alt=\"Voltorb space\" /></span></div>\n      )\n    default:\n      return (\n        <div className=\"spaceMultiplier\"><span>{ space.type }</span></div>\n      )\n  }\n}\n\nexport default BoardSpace;","import Space, { SpaceTypeEnum } from './space';\n\nexport function totalOfMultipliers(spaces: Space[]): number {\n  return spaces.reduce((total, space) => space.type !== SpaceTypeEnum.Voltorb ? total + space.type : total, 0)\n}\n\nexport function countOfVoltorbs(spaces: Space[]): number {\n  return spaces.reduce((total, space) => space.type === SpaceTypeEnum.Voltorb ? total + 1 : total, 0)\n}\n\nexport function getColumnFromBoard(column: number, spaces: Space[][]): Space[] {\n  return spaces.map(row => row[column]);\n}","import * as ShuffleSeed from 'shuffle-seed';\n\nimport Space, { SpaceTypeEnum, SpaceStateEnum } from './space';\n\nexport enum BoardStatusEnum {\n  Active,\n  Lost,\n  Complete\n}\n\nclass Board {\n  _difficulty: number;\n  spaces: Space[][];\n  width = 5;\n  height = 5;\n\n  constructor(difficulty: number) {\n    this._difficulty = difficulty;\n    this.spaces = [];\n  }\n\n  // Board builders\n\n  public buildSpaces(random: any) {\n    this.spaces = this.generateSpaces(random);\n  }\n\n  public generateSpaces(random: any): Space[][] {\n    let toReturn = [];\n    const elements = this.seededElements(random);\n\n    for(var row = 0; row < this.height; row++) {\n      toReturn.push([] as Space[]);\n      for(var col = 0; col < this.width; col++) {\n        toReturn[row][col] = elements[((row * this.width) + col)]\n      }\n    }\n    return toReturn;\n  }\n\n  public seededElements(random: any): Space[] {\n    let elements: Space[] = [\n      ...this.buildMultipliers(random),\n      ...this.buildVoltorbs(),\n      ...this.buildOneSpaces()\n    ];\n    elements = ShuffleSeed.shuffle(elements, random().toString(36).substring(2));\n    return elements;\n  }\n\n  private buildMultipliers(random: any): Space[] {\n    return Array(this.numberOfMultipliers()).fill(0).map(() => {\n      if(random() < 0.6) {\n        return new Space(SpaceTypeEnum.Two);\n      } else {\n        return new Space(SpaceTypeEnum.Three);\n      }\n    })\n  }\n\n  private buildVoltorbs() {\n    return Array(this.numberOfVoltorbs()).fill(0).map(() => new Space(SpaceTypeEnum.Voltorb));\n  }\n\n  private buildOneSpaces() {\n    return Array(this.numberOfOneSpaces()).fill(0).map(() => new Space(SpaceTypeEnum.One));\n  }\n\n  // Mutator accessors\n\n  public allSpaces(): Space[] {\n    return this.spaces.flat();\n  }\n\n  public allMultiplierSpaces(): Space[] {\n    return this.allSpaces().filter((space: Space) => space.isMultiplier());\n  }\n\n  public flippedSpaces(): Space[] {\n    return this.allSpaces().filter((space: Space) => space.isFlipped())\n  }\n\n  public flippedMultiplierSpaces(): Space[] {\n    return this.flippedSpaces().filter((space: Space) => space.isMultiplier());\n  }\n\n  public getCurrentRoundPoints(): number {\n    return this.flippedMultiplierSpaces().reduce((total, space) => total * space.type, 1);\n  }\n\n  public get difficulty(): number {\n    return this._difficulty;\n  }\n  \n  public set difficulty(difficulty: number) {\n    this._difficulty = difficulty;\n  }\n\n  // Query methods\n\n  public checkBoard(): BoardStatusEnum {\n    if(this.isBoardLost()) {\n      return BoardStatusEnum.Lost;\n    } else if(this.isBoardComplete()) {\n      return BoardStatusEnum.Complete;\n    }\n\n    return BoardStatusEnum.Active;\n  }\n\n  public isBoardLost(): boolean {\n    return this.flippedSpaces().find((space) => space.type === SpaceTypeEnum.Voltorb) !== undefined;\n  }\n\n  public isBoardComplete(): boolean {\n    const flippedSpaces = this.flippedMultiplierSpaces();\n    return flippedSpaces.filter((space) => space.state === SpaceStateEnum.Flipped).length === this.allMultiplierSpaces().length\n  }\n\n  // Internal calculations\n  \n  private numberOfMultipliers = () => this.difficulty + 2;\n  private numberOfVoltorbs = () => this.difficulty >= 5 ? 10 : (this.difficulty + 5);\n  private totalNumberOfSpaces = () => this.width * this.height;\n  private numberOfOneSpaces = () => this.totalNumberOfSpaces() - (this.numberOfMultipliers() + this.numberOfVoltorbs())\n}\n\nexport default Board;","import React from 'react';\n\nimport Space from '../../services/space';\nimport { totalOfMultipliers, countOfVoltorbs } from '../../services/helpers';\n\nimport Voltorb from '../../images/voltorb.svg';\nimport './BoardSpaceSummary.scss';\n\ninterface BoardSpacesSummaryInterface {\n  spaces: Space[];\n}\n\nconst BoardSpacesSummary = ({ spaces }: BoardSpacesSummaryInterface) =>\n  <div className=\"space spacesSummary\">\n    <div className=\"spaceBorder\">\n      <div className=\"spaceInner spaceSummaryInner\">\n        <div className=\"spacesSummaryMultiplierTotal\">{ totalOfMultipliers(spaces) }</div>\n        <div className=\"spacesSummaryVoltorbTotal\">\n          <img src={Voltorb} alt=\"Voltorb\" />\n          <span>{ countOfVoltorbs(spaces) }</span>\n        </div>\n      </div>\n    </div>\n  </div>\n\nexport default BoardSpacesSummary;","import React from 'react';\nimport Space from '../../services/space';\nimport BoardSpace from './BoardSpace';\nimport BoardSpacesSummary from './BoardSpacesSummary';\n\nimport './BoardRow.scss';\n\nexport interface BoardRowInterface {\n  spaces: Space[];\n  handleSpaceClick: (space: Space) => void;\n  rowIndex: number;\n}\n\nconst BoardRow = ({ spaces, handleSpaceClick, rowIndex }: BoardRowInterface) =>\n  <div className=\"boardRow\">\n    { spaces.map((space, columnIndex) => <BoardSpace key={`space_${rowIndex}_${columnIndex}`} space={space} handleSpaceClick={handleSpaceClick} />) }\n    <BoardSpacesSummary spaces={spaces} />\n  </div>\n\nexport default BoardRow;","import React from 'react';\n\nimport Board from '../../services/board';\nimport Space from '../../services/space';\nimport BoardRow from './BoardRow';\nimport BoardSpacesSummary from './BoardSpacesSummary';\nimport { getColumnFromBoard } from '../../services/helpers';\n\nimport './GameBoard.scss';\n\ninterface BoardInterface {\n  board: Board;\n  handleSpaceClick: (space: Space) => void;\n}\n\nconst GameBoard = ({ board: { spaces }, handleSpaceClick }: BoardInterface)  =>\n  <div id=\"board\">\n    {\n      spaces.map((row: Space[], index: number) =>\n        <BoardRow key={`boardrow_${index}`} spaces={row} handleSpaceClick={handleSpaceClick} rowIndex={index} />\n      )\n    }\n    <div className=\"bottomSummary\">\n      {\n        spaces.map((__: any, columnIndex: number) =>\n          <BoardSpacesSummary key={`board_column_summary_${columnIndex}`} spaces={getColumnFromBoard(columnIndex, spaces)} />\n        )\n      }\n    </div>\n  </div>\n\nexport default GameBoard;","import seedrandom from 'seedrandom';\n\nimport Board, { BoardStatusEnum } from \"./board\";\n\nexport enum GameStateEnum {\n  Playing,\n  RoundLost,\n  Intermission\n}\n\nclass Game {\n  board!: Board;\n  seed: string = this.randomSeed();\n  random: any;\n  currentRoundPoints: number = 0;\n  totalPoints: number = 0;\n  state: GameStateEnum = GameStateEnum.Playing;\n  flippedMultipliersCount: number = 0;\n\n  constructor() {\n    // Ensure that random is maintained between each board\n    this.random = seedrandom(this.seed);\n    this.board = new Board(1);\n    this.board.buildSpaces(this.random);\n  }\n\n  /**\n   * Method to reliably calculate the current state of the board.\n   * It currently changes game state as well.\n   */\n  public updateBoardState(): GameStateEnum {\n    this.currentRoundPoints = this.board.getCurrentRoundPoints();\n    this.flippedMultipliersCount = this.board.flippedMultiplierSpaces().length;\n\n    switch(this.board.checkBoard()) {\n      case BoardStatusEnum.Active:\n        this.state = GameStateEnum.Playing;\n        break;\n      case BoardStatusEnum.Complete:\n        this.startIntermission();\n        break;\n      case BoardStatusEnum.Lost:\n        this.state = GameStateEnum.RoundLost;\n        break;\n    }\n\n    return this.state;\n  }\n\n  public startRound(): void {\n    this.board.buildSpaces(this.random);\n    this.state = GameStateEnum.Playing;\n  }\n\n  public nextRound(): void {\n    if(this.state === GameStateEnum.RoundLost) {\n      this.handleLostRound();\n    } else {\n      this.handleWonRound();\n    }\n    this.startRound();\n  }\n\n  public handleLostRound(): void {\n    if(this.flippedMultipliersCount === 0) {\n      this.board.difficulty = 1;\n    } else if(this.flippedMultipliersCount <= this.board.difficulty) {\n      this.board.difficulty = this.flippedMultipliersCount;\n    } \n    this.currentRoundPoints = 0;\n  }\n\n  public handleWonRound(): void {\n    if(this.board.difficulty < 8) {\n      this.board.difficulty += 1;\n    }\n  }\n\n  public resetGame(): void {\n    this.seed = this.randomSeed();\n    this.random = seedrandom(this.seed);\n    this.board.difficulty = 1;\n    this.currentRoundPoints = 0;\n    this.totalPoints = 0;\n  }\n\n  public startIntermission(): void {\n    this.state = GameStateEnum.Intermission;\n    this.totalPoints += this.currentRoundPoints;\n    this.currentRoundPoints = 0;\n  }\n\n  private randomSeed(): string {\n    return Math.random().toString(36).substring(2);\n  }\n}\n\nexport default Game;","import React, { useState } from 'react';\n\nimport GameBoard from './board/GameBoard';\nimport Game, { GameStateEnum } from '../services/game';\nimport Space, { SpaceStateEnum } from '../services/space';\nimport GameStateOverlay from './GameStateOverlay';\nimport Sidebar from './sidebar/Sidebar';\n\nimport './VoltorbFlip.scss';\n\nexport enum InputModeEnum {\n  MarkingVoltorb,\n  MarkingOne,\n  MarkingTwo,\n  MarkingThree,\n  Flipping\n}\n\nconst localStorage = window.localStorage;\n\nconst getHighScoreStorage = () => {\n  return parseInt(localStorage.getItem('voltorbFlipHiScore') || '0');\n}\n\nconst setHighScoreInStorage = (score: number) => {\n  localStorage.setItem('voltorbFlipHiScore', score.toString());\n}\n\nconst VoltorbFlip = () => {\n  const [game, setGame] = useState(() => new Game());\n  const [showOverlay, setShowOverlay] = useState(false);\n  const [inputMode, setInputMode] = useState(InputModeEnum.Flipping);\n  const [highScore, setHighScore] = useState(getHighScoreStorage());\n\n  const handleSpaceClick = (space: Space) => {\n    if(inputMode === InputModeEnum.Flipping) {\n      handleCardFlip(space);\n    } else {\n      handleCardMark(space);\n    }\n  }\n\n  const handleCardMark = (space: Space) => {\n    space.mark(inputMode.valueOf());\n    setGame(Object.create(game));  \n  }\n\n  const handleCardFlip = (space: Space) => {\n    if(space.state === SpaceStateEnum.Hidden && game.state === GameStateEnum.Playing) {\n      space.flip();\n      game.updateBoardState();\n\n      if(game.state !== GameStateEnum.Playing) {\n        if(game.totalPoints > highScore) {\n          setHighScoreInStorage(game.totalPoints);\n          setHighScore(game.totalPoints);\n        }\n        setTimeout(() => {\n          game.board.allSpaces().forEach((space: Space) => space.flip());\n          setGame(Object.create(game));\n        }, 500);\n        \n        setTimeout(() => {\n          setShowOverlay(true);\n        }, 2000);\n      }\n      setGame(Object.create(game));  \n    }\n  }\n\n  const handleRestartClick = () => {\n    game.resetGame();\n    game.startRound();\n    setGame(Object.create(game));  \n    setShowOverlay(false);\n  }\n\n  const handleNextRoundClick = () => {\n    game.nextRound();\n    setGame(Object.create(game));  \n    setShowOverlay(false);\n  }\n\n  const handleInputModeChange = (inputMode: InputModeEnum) => {\n    setInputMode(inputMode);\n  }\n\n  return (\n    <div className=\"voltorbFlip\">\n      { game.board && \n        <React.Fragment>\n          <div className=\"boardArea\">\n            <GameBoard board={game.board} handleSpaceClick={handleSpaceClick} />\n            <GameStateOverlay\n              gameState={game.state}\n              handleRestartClick={handleRestartClick}\n              handleNextRoundClick={handleNextRoundClick}\n              showOverlay={showOverlay} />\n          </div>\n          <Sidebar\n            difficulty={game.board.difficulty}\n            totalPoints={game.totalPoints}\n            currentPoints={game.currentRoundPoints}\n            highScore={highScore}\n            handleInputModeChange={handleInputModeChange}\n            currentInputMode={inputMode}\n            handleRestartClick={handleRestartClick} />\n        </React.Fragment>\n      }\n    </div>\n  )\n}\n\nexport default VoltorbFlip;","import React from 'react';\n\nimport './Button.scss';\n\ninterface ButtonInterface {\n  children: any;\n  type?: string;\n  className?: string;\n  handleOnClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nconst Button = ({ children, type, className, handleOnClick }: ButtonInterface) =>\n  <button className={`btn btn-${type} ${className}`} onClick={handleOnClick}>{ children }</button>\n\nexport default Button;","import React from 'react';\nimport { GameStateEnum } from '../services/game';\nimport Button from './Button';\n\nimport './GameStateOverlay.scss';\n\nconst Overlay = ({ children, show, className='' }: any) =>\n  <div className={`overlay ${className} ${show ? 'show' : ''}`}>\n    <div className=\"overlayInner\" >\n      { children }\n    </div>\n  </div>\n\nconst GameIntermissionOverlay = ({ handleNextRoundClick }: any) =>\n  <React.Fragment>\n    <h2>Round complete!</h2>\n    <Button handleOnClick={handleNextRoundClick} type=\"primary\">Next round</Button>\n  </React.Fragment>\n\nconst GameRoundLostOverlay = ({ handleNextRoundClick, handleRestartClick }: any) =>\n  <React.Fragment>\n    <h2>Oh no, a Voltorb!</h2>\n    <div className=\"btnGroup\">\n      <Button handleOnClick={handleRestartClick} type=\"default\">Restart</Button>\n      <Button handleOnClick={handleNextRoundClick} type=\"primary\">Next round</Button>\n    </div>\n  </React.Fragment>\n\ninterface GameStateOverlayInterface {\n  gameState: GameStateEnum;\n  showOverlay: boolean;\n  handleNextRoundClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  handleRestartClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n}\n\nconst GameStateOverlay = ({ showOverlay, gameState, handleNextRoundClick, handleRestartClick }: GameStateOverlayInterface) => {\n  switch(gameState){\n    case GameStateEnum.Intermission: {\n      return <Overlay show={showOverlay}><GameIntermissionOverlay handleNextRoundClick={handleNextRoundClick} /></Overlay>\n    }\n    case GameStateEnum.RoundLost: {\n      return <Overlay show={showOverlay} className=\"intermission\"><GameRoundLostOverlay handleNextRoundClick={handleNextRoundClick} handleRestartClick={handleRestartClick} /></Overlay>\n    }\n    default: {\n      return null;\n    }\n  }\n}\n\nexport default GameStateOverlay;","import React from 'react';\nimport CountUp from 'react-countup';\n\nimport './GameScore.scss';\n\ninterface GameScoreInterface {\n  totalScore: number;\n  currentRoundScore: number;\n  highScore: number;\n}\n\nconst GameScore = ({ totalScore, currentRoundScore, highScore }: GameScoreInterface) =>\n  <div className=\"gameScore\">\n    <div className=\"gameScoreBorder current\">\n      <div className=\"gameScoreInner\">\n        <div className=\"name\">Round points</div>\n        <div className=\"score\">\n          <CountUp end={currentRoundScore} duration={0.5} />\n        </div>\n      </div>\n    </div>\n    <div className=\"gameScoreBorder total\">\n      <div className=\"gameScoreInner\">\n        <div className=\"name\">Total points</div>\n        <div className=\"score\">\n          <CountUp end={totalScore} duration={1} />\n        </div>\n      </div>\n    </div>\n    <div className=\"gameScoreBorder highScore\">\n      <div className=\"gameScoreInner\">\n        <div className=\"name\">High score</div>\n        <div className=\"score\">\n          <CountUp end={highScore} duration={1.4} />\n        </div>\n      </div>\n    </div>\n  </div>\n\nexport default GameScore;","import React from 'react';\n\nimport './GameDifficulty.scss';\n\ninterface GameDifficultyInterface {\n  difficulty: number;\n}\n\nconst GameDifficulty = ({ difficulty }: GameDifficultyInterface) =>\n  <div className=\"gameDifficulty\">\n    <h1>VOLTORB Flip Lvl. {difficulty}</h1>\n  </div>\n\nexport default GameDifficulty;","import React from 'react';\n\nimport { InputModeEnum } from '../VoltorbFlip';\n\nimport './GameInputMode.scss';\nimport VoltorbMarker from '../../images/voltorb_marker.svg';\n\ninterface GameInputModeInterface {\n  currentInputMode: InputModeEnum;\n  handleInputModeChange: (inputMode: InputModeEnum) => void;\n}\n\nconst GameInputMode = ({ currentInputMode, handleInputModeChange }: GameInputModeInterface) =>\n  <div className=\"gameInputMode\">\n    <div className=\"markers\">\n      <div\n        className={`marker voltorb ${currentInputMode === InputModeEnum.MarkingVoltorb ? 'selected' : ''}`}\n        onClick={() => handleInputModeChange(InputModeEnum.MarkingVoltorb)}>\n          <img src={VoltorbMarker} alt=\"Voltorb marker\" />\n      </div>\n      <div\n        className={`marker text one ${currentInputMode === InputModeEnum.MarkingOne ? 'selected' : ''}`}\n        onClick={() => handleInputModeChange(InputModeEnum.MarkingOne)}>\n          <span>1</span>\n      </div>\n      <div\n        className={`marker text two ${currentInputMode === InputModeEnum.MarkingTwo ? 'selected' : ''}`}\n        onClick={() => handleInputModeChange(InputModeEnum.MarkingTwo)}>\n          <span>2</span>\n      </div>\n      <div\n        className={`marker text three ${currentInputMode === InputModeEnum.MarkingThree ? 'selected' : ''}`}\n        onClick={() => handleInputModeChange(InputModeEnum.MarkingThree)}>\n          <span>3</span>\n      </div>\n    </div>\n    <div className={`flip ${currentInputMode === InputModeEnum.Flipping ? 'selected' : ''}`} onClick={() => handleInputModeChange(InputModeEnum.Flipping)}>\n      <span>Flip</span>\n    </div>\n  </div>\n\nexport default GameInputMode;","import React from 'react';\n\nimport { InputModeEnum } from '../VoltorbFlip';\n\nimport GameScore from './GameScore';\nimport GameDifficulty from './GameDifficulty';\nimport GameInputMode from './GameInputMode';\nimport Button from '../Button';\n\nimport './Sidebar.scss';\n\ninterface SidebarPropertiesInterface {\n  difficulty: number;\n  totalPoints: number;\n  currentPoints: number;\n  highScore: number;\n  handleInputModeChange: (inputMode: InputModeEnum) => void;\n  currentInputMode: InputModeEnum;\n  handleRestartClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nconst Sidebar = ({ difficulty, totalPoints, currentPoints, highScore, handleInputModeChange, currentInputMode, handleRestartClick }: SidebarPropertiesInterface) =>\n  <div className=\"sidebar\">\n    <div className=\"gameMenu\">\n      <div className=\"details\">\n        <GameDifficulty difficulty={difficulty} />\n        <GameScore totalScore={totalPoints} currentRoundScore={currentPoints} highScore={highScore} />\n      </div>\n      <div className=\"inputs\">\n        <GameInputMode handleInputModeChange={handleInputModeChange} currentInputMode={currentInputMode} />\n        <div className=\"controls\">\n          <Button handleOnClick={handleRestartClick} type=\"secondary\">Start new game</Button>\n        </div>\n      </div>\n    </div>\n    <footer>\n      Created by <a href=\"https://twitter.com/icemaz\" target=\"_blank\" rel=\"noopener noreferrer\">@icemaz</a> - <a href=\"https://github.com/EdwardJFox/voltorb-flip\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\n    </footer>\n  </div>\n\nexport default Sidebar;","import React from 'react';\n\nimport VoltorbFlip from './components/VoltorbFlip';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VoltorbFlip />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}