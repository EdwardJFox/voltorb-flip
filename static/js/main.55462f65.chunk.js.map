{"version":3,"sources":["images/voltorb_marker.svg","images/voltorb.svg","services/space.ts","components/BoardSpace.tsx","components/BoardSpacesSummary.tsx","components/BoardRow.tsx","components/GameBoard.tsx","services/game.ts","services/board.ts","components/VoltorbFlip.tsx","components/GameScore.tsx","components/GameDifficulty.tsx","components/Button.tsx","components/GameStateOverlay.tsx","components/GameInputMode.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SpaceTypeEnum","SpaceStatusEnum","SpaceMarkersEnum","Space","type","state","Hidden","markers","this","Flipped","Voltorb","marking","includes","splice","indexOf","push","Two","BoardSpaceMarker","marker","className","toString","BoardSpaceMarkerContent","src","VoltorbMarker","alt","BoardSpaceBackContent","space","BoardSpace","handleSpaceClick","onClick","e","map","BoardSpacesSummary","spaces","reduce","total","countOfMultipliers","countOfVoltorbs","BoardRow","rowIndex","columnIndex","key","buildColumnSpacesForSummary","index","row","GameBoard","GameState","board","__","Board","difficulty","width","height","numberOfMultipliers","numberOfVoltorbs","totalNumberOfSpaces","numberOfOneSpaces","random","generateSpaces","toReturn","elements","seededElements","col","buildMultipliers","buildVoltorbs","buildOneSpaces","ShuffleSeed","substring","allSpaces","filter","isFlipped","flippedSpaces","isMultiplier","Array","fill","Three","One","InputModeEnum","Game","seed","randomSeed","currentRoundPoints","totalPoints","Playing","flippedMultipliers","seedrandom","buildSpaces","allFlippedSpaces","allHigherMultipliers","allFlippedMultipliers","find","RoundLost","flippedMultiplierSpaces","length","startIntermission","handleLostRound","handleWonRound","startRound","Intermission","Math","GameScore","totalScore","currentRoundScore","highScore","formatScore","value","round","formatValue","GameDifficulty","Button","children","handleOnClick","Overlay","show","GameIntermissionOverlay","handleNextRoundClick","Fragment","GameRoundLostOverlay","handleRestartClick","GameStateOverlay","showOverlay","gameState","GameInputMode","currentInputMode","handleInputModeChange","MarkingVoltorb","MarkingOne","MarkingTwo","MarkingThree","Flipping","localStorage","window","VoltorbFlip","useState","game","setGame","setShowOverlay","inputMode","setInputMode","parseInt","getItem","setHighScore","handleCardMark","mark","valueOf","Object","create","handleCardFlip","score","flip","checkBoard","setItem","setTimeout","forEach","resetGame","nextRound","href","target","rel","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.55462f65.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/voltorb_marker.99f58e1e.svg\";","module.exports = __webpack_public_path__ + \"static/media/voltorb.636f6788.svg\";","export enum SpaceTypeEnum {\n  Voltorb,\n  One,\n  Two,\n  Three\n}\n\nexport enum SpaceStatusEnum {\n  Hidden,\n  Flipped\n}\n\nexport enum SpaceMarkersEnum {\n  Voltorb,\n  One,\n  Two,\n  Three\n}\n\nclass Space {\n  type: SpaceTypeEnum;\n  state = SpaceStatusEnum.Hidden;\n  markers: SpaceMarkersEnum[] = [];\n\n  constructor(type: SpaceTypeEnum) {\n    this.type = type;\n  }\n\n  public flip(): Boolean {\n    this.state = SpaceStatusEnum.Flipped;\n    if(this.type === SpaceTypeEnum.Voltorb) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  public mark(marking: SpaceMarkersEnum): void {\n    if(this.markers.includes(marking)) {\n      this.markers.splice(this.markers.indexOf(marking), 1);\n    } else {\n      this.markers.push(marking);\n    }\n  }\n\n  public isFlipped(): boolean {\n    return this.state === SpaceStatusEnum.Flipped;\n  }\n\n  public isMultiplier(): boolean {\n    return this.type >= SpaceMarkersEnum.Two;\n  }\n}\n\nexport default Space;","import React from 'react';\nimport Space, { SpaceStatusEnum, SpaceTypeEnum, SpaceMarkersEnum } from '../services/space';\n\nimport VoltorbMarker from '../images/voltorb_marker.svg';\nimport Voltorb from '../images/voltorb.svg';\n\nimport './BoardSpace.scss';\n\ninterface SpaceInterface {\n  space: Space;\n  handleSpaceClick: (space: Space) => void;\n}\n\nconst BoardSpace = ({ space, handleSpaceClick }: SpaceInterface) =>\n  <div className={`space boardSpace ${space.state === SpaceStatusEnum.Hidden ? 'hidden' : 'flipped' }`}>\n    <div className=\"spaceBorder\">\n      <div className=\"spaceInner\">\n        <div className=\"spaceFront\" onClick={(e) => handleSpaceClick(space)}>\n          <div className=\"markers\">\n            { space.markers.map((marker: SpaceMarkersEnum) => <BoardSpaceMarker marker={marker} />) }\n          </div>\n        </div>\n        <div className=\"spaceBack\">\n          { space.state === SpaceStatusEnum.Flipped &&\n            BoardSpaceBackContent(space)\n          }\n        </div>\n      </div>\n    </div>\n  </div>\n\nconst BoardSpaceMarker = ({ marker }: { marker: SpaceMarkersEnum }) =>\n  <div className={`boardSpaceMarker marker_${marker.toString()}`}>\n    { BoardSpaceMarkerContent(marker) }\n  </div>\n\nconst BoardSpaceMarkerContent = (marker: SpaceMarkersEnum) => {\n  switch(marker) {\n    case SpaceMarkersEnum.Voltorb:\n      return <img src={VoltorbMarker} alt=\"Voltorb marker\" />\n    default:\n      return <span>{ marker }</span>\n  }\n}\n\nconst BoardSpaceBackContent = (space: Space) => {\n  switch(space.type) {\n    case SpaceTypeEnum.Voltorb:\n      return (\n        <div className=\"spaceVoltorb\"><span><img src={Voltorb} alt=\"Voltorb space\" /></span></div>\n      )\n    default:\n      return (\n        <div className=\"spaceMultiplier\"><span>{ space.type }</span></div>\n      )\n  }\n}\n\nexport default BoardSpace;","import React from 'react';\nimport Space, { SpaceTypeEnum } from '../services/space';\n\nimport Voltorb from '../images/voltorb.svg';\nimport './BoardSpaceSummary.scss';\n\ninterface BoardSpacesSummaryInterface {\n  spaces: Space[];\n}\n\nconst BoardSpacesSummary = ({ spaces }: BoardSpacesSummaryInterface) => {\n  return (\n    <div className=\"space spacesSummary\">\n      <div className=\"spaceBorder\">\n        <div className=\"spaceInner spaceSummaryInner\">\n          <div className=\"spacesSummaryMultiplierTotal\">{ countOfMultipliers(spaces) }</div>\n          <div className=\"spacesSummaryVoltorbTotal\">\n            <img src={Voltorb} alt=\"Voltorb\" />\n            <span>{ countOfVoltorbs(spaces) }</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction countOfMultipliers(spaces: Space[]): number {\n  return spaces.reduce((total, space) => space.type !== SpaceTypeEnum.Voltorb ? total + space.type : total, 0)\n}\n\nfunction countOfVoltorbs(spaces: Space[]): number {\n  return spaces.reduce((total, space) => space.type === SpaceTypeEnum.Voltorb ? total + 1 : total, 0)\n}\n\nexport default BoardSpacesSummary;","import React from 'react';\nimport Space from '../services/space';\nimport BoardSpace from './BoardSpace';\nimport BoardSpacesSummary from './BoardSpacesSummary';\n\nimport './BoardRow.scss';\n\nexport interface BoardRowInterface {\n  spaces: Space[];\n  handleSpaceClick: (space: Space) => void;\n  rowIndex: number;\n}\n\nconst BoardRow = ({ spaces, handleSpaceClick, rowIndex }: BoardRowInterface) => {\n  return (\n    <div className=\"boardRow\">\n      { spaces.map((space, columnIndex) => <BoardSpace key={`space_${rowIndex}_${columnIndex}`} space={space} handleSpaceClick={handleSpaceClick} />) }\n      <BoardSpacesSummary spaces={spaces} />\n    </div>\n  )\n}\n\nexport default BoardRow;","import React from 'react';\nimport Board from '../services/board';\nimport Space from '../services/space';\nimport BoardRow from './BoardRow';\nimport BoardSpacesSummary from './BoardSpacesSummary';\n\nimport './GameBoard.scss';\n\ninterface BoardInterface {\n  board: Board;\n  handleSpaceClick: (space: Space) => void;\n}\n\nconst GameBoard = ({ board, handleSpaceClick }: BoardInterface)  => {\n  const { spaces } = board;\n  return (\n    <div className=\"board\">\n      {\n        spaces.map((row: Space[], index: number) =>\n          <BoardRow key={`boardrow_${index}`} spaces={row} handleSpaceClick={handleSpaceClick} rowIndex={index} />\n        )\n      }\n      <div className=\"bottomSummary\">\n        {\n          spaces.map((__: any, rowIndex: number) =>\n            <BoardSpacesSummary key={`board_column_summary_${rowIndex}`} spaces={buildColumnSpacesForSummary(rowIndex, spaces)} />\n          )\n        }\n      </div>\n    </div>\n  )\n}\n\nfunction buildColumnSpacesForSummary(index: number, spaces: Space[][]): Space[] {\n  return spaces.map(row => row[index]);\n}\n\nexport default GameBoard;","import seedrandom from 'seedrandom';\n\nimport Board from \"./board\";\nimport Space, { SpaceStatusEnum, SpaceTypeEnum } from './space';\n\nexport enum GameState {\n  Playing,\n  RoundLost,\n  Intermission\n}\n\nclass Game {\n  board!: Board;\n  seed: string = this.randomSeed();\n  random: any;\n  currentRoundPoints: number = 0;\n  totalPoints: number = 0;\n  state: GameState = GameState.Playing;\n  flippedMultipliers: number = 0;\n\n  constructor() {\n    // Ensure that random is maintained between each board as well, from the beginning of the game\n    this.random = seedrandom(this.seed);\n    this.board = new Board(1);\n    this.board.buildSpaces(this.random);\n  }\n\n  /**\n   * Return true for a change in state\n   */\n  public checkBoard(): GameState {\n    const allSpaces = this.board.allSpaces();\n    const allFlippedSpaces = allSpaces.filter((space) => space.state === SpaceStatusEnum.Flipped);\n    const allHigherMultipliers = allSpaces.filter((space) => space.type > 1);\n    const allFlippedMultipliers = allFlippedSpaces.filter((space) => space.type > 0);\n\n    this.currentRoundPoints = allFlippedMultipliers.reduce((total, space) => total * space.type, 1);\n    if(allFlippedSpaces.find((space) => space.type === SpaceTypeEnum.Voltorb)) {\n      this.state = GameState.RoundLost;\n      this.flippedMultipliers = this.board.flippedMultiplierSpaces().length;\n    } else if(allHigherMultipliers.filter((space) => space.state === SpaceStatusEnum.Flipped).length === allHigherMultipliers.length) {\n      this.startIntermission();\n    }\n\n    return this.state;\n  }\n\n  public startRound(): Space[][] {\n    this.board.buildSpaces(this.random);\n    this.state = GameState.Playing;\n    return this.board.spaces;\n  }\n\n  public nextRound(): Space[][] {\n    if(this.state === GameState.RoundLost) {\n      this.handleLostRound();\n    } else {\n      this.handleWonRound();\n    }\n    return this.startRound();\n  }\n\n  public handleLostRound(): void {\n    if(this.flippedMultipliers === 0) {\n      this.board.difficulty = 1;\n    } else if(this.flippedMultipliers <= this.board.difficulty) {\n      this.board.difficulty = this.flippedMultipliers;\n    } \n    this.currentRoundPoints = 0;\n  }\n\n  public handleWonRound(): void {\n    if(this.board.difficulty < 8) {\n      this.board.difficulty += 1;\n    }\n  }\n\n  public resetGame(): Space[][] {\n    this.seed = this.randomSeed();\n    this.random = seedrandom(this.seed);\n    this.board.difficulty = 1;\n    this.currentRoundPoints = 0;\n    this.totalPoints = 0;\n    return this.startRound();\n  }\n\n  public startIntermission() {\n    this.state = GameState.Intermission;\n    this.totalPoints += this.currentRoundPoints;\n    this.currentRoundPoints = 0;\n  }\n\n  private randomSeed(): string {\n    return Math.random().toString(36).substring(2);\n  }\n}\n\nexport default Game;","import * as ShuffleSeed from 'shuffle-seed';\n\nimport Space, { SpaceTypeEnum } from './space';\n\nclass Board {\n  difficulty: number;\n  spaces: Space[][];\n  width = 5;\n  height = 5;\n\n  constructor(difficulty: number) {\n    this.difficulty = difficulty;\n    this.spaces = [];\n  }\n\n  public buildSpaces(random: any) {\n    this.spaces = this.generateSpaces(random);\n  }\n\n  public generateSpaces(random: any): Space[][] {\n    let toReturn = [];\n    const elements = this.seededElements(random);\n\n    for(var row = 0; row < this.height; row++) {\n      toReturn.push([] as Space[]);\n      for(var col = 0; col < this.width; col++) {\n        toReturn[row][col] = elements[((row * this.width) + col)]\n      }\n    }\n    return toReturn;\n  }\n\n  public seededElements(random: any): Space[] {\n    let elements: Space[] = [\n      ...this.buildMultipliers(random),\n      ...this.buildVoltorbs(),\n      ...this.buildOneSpaces()\n    ];\n    elements = ShuffleSeed.shuffle(elements, random().toString(36).substring(2));\n    return elements;\n  }\n\n  public allSpaces(): Space[] {\n    return this.spaces.reduce((spaces: Space[], row) => [...spaces, ...row])\n  }\n\n  public flippedSpaces(): Space[] {\n    return this.allSpaces().filter((space: Space) => space.isFlipped())\n  }\n\n  public flippedMultiplierSpaces(): Space[] {\n    return this.flippedSpaces().filter((space: Space) => space.isMultiplier())\n  }\n\n  private buildMultipliers(random: any): Space[] {\n    return Array(this.numberOfMultipliers()).fill(0).map(() => {\n      if(random() < 0.6) {\n        return new Space(SpaceTypeEnum.Two);\n      } else {\n        return new Space(SpaceTypeEnum.Three);\n      }\n    })\n  }\n\n  private buildVoltorbs() {\n    return Array(this.numberOfVoltorbs()).fill(0).map(() => new Space(SpaceTypeEnum.Voltorb));\n  }\n\n  private buildOneSpaces() {\n    return Array(this.numberOfOneSpaces()).fill(0).map(() => new Space(SpaceTypeEnum.One));\n  }\n  \n  private numberOfMultipliers = () => this.difficulty + 2;\n  private numberOfVoltorbs = () => this.difficulty >= 5 ? 10 : (this.difficulty + 5);\n  private totalNumberOfSpaces = () => this.width * this.height;\n  private numberOfOneSpaces = () => this.totalNumberOfSpaces() - (this.numberOfMultipliers() + this.numberOfVoltorbs())\n}\n\nexport default Board;","import React, { useState } from 'react';\n\nimport GameBoard from './GameBoard';\nimport Game, { GameState } from '../services/game';\nimport GameScore from './GameScore';\nimport Space, { SpaceStatusEnum } from '../services/space';\nimport GameDifficulty from './GameDifficulty';\nimport GameStateOverlay from './GameStateOverlay';\nimport GameInputMode from './GameInputMode';\nimport Button from './Button';\n\nimport './VoltorbFlip.scss';\n\nexport enum InputModeEnum {\n  MarkingVoltorb,\n  MarkingOne,\n  MarkingTwo,\n  MarkingThree,\n  Flipping\n}\n\nconst localStorage = window.localStorage;\n\nconst getHighScoreStorage = () => {\n  return parseInt(localStorage.getItem('voltorbFlipHiScore') || '0');\n}\n\nconst setHighScoreInStorage = (score: number) => {\n  localStorage.setItem('voltorbFlipHiScore', score.toString());\n}\n\nconst VoltorbFlip = () => {\n  const [game, setGame] = useState(new Game());\n  // const [seed, setSeed] = useState(game.seed);\n  const [showOverlay, setShowOverlay] = useState(false);\n  const [inputMode, setInputMode] = useState(InputModeEnum.Flipping);\n  const [highScore, setHighScore] = useState(getHighScoreStorage());\n\n  const handleSpaceClick = (space: Space) => {\n    if(inputMode === InputModeEnum.Flipping) {\n      handleCardFlip(space);\n    } else {\n      handleCardMark(space);\n    }\n  }\n\n  const handleCardMark = (space: Space) => {\n    space.mark(inputMode.valueOf());\n    setGame(Object.create(game));  \n  }\n\n  const handleCardFlip = (space: Space) => {\n    if(space.state === SpaceStatusEnum.Hidden && game.state === GameState.Playing) {\n      space.flip();\n      if(game.checkBoard()) {\n        if(game.totalPoints > highScore) {\n          setHighScoreInStorage(game.totalPoints);\n          setHighScore(game.totalPoints);\n        }\n        setTimeout(() => {\n          game.board.allSpaces().forEach((space: Space) => space.flip());\n          setGame(Object.create(game));\n        }, 500);\n        \n        setTimeout(() => {\n          setShowOverlay(true);\n        }, 2000);\n      }\n      setGame(Object.create(game));  \n    }\n  }\n\n  const handleRestartClick = () => {\n    game.resetGame();\n    setGame(Object.create(game));  \n    setShowOverlay(false);\n  }\n\n  const handleNextRoundClick = () => {\n    game.nextRound();\n    setGame(Object.create(game));  \n    setShowOverlay(false);\n  }\n\n  const handleInputModeChange = (inputMode: InputModeEnum) => {\n    setInputMode(inputMode);\n  }\n\n  return (\n    <div className=\"voltorbFlip\">\n      { game.board && \n        <React.Fragment>\n          <div className=\"boardArea\">\n            <GameBoard board={game.board} handleSpaceClick={handleSpaceClick} />\n            <GameStateOverlay gameState={game.state} handleRestartClick={handleRestartClick} handleNextRoundClick={handleNextRoundClick} showOverlay={showOverlay} />\n          </div>\n          <div className=\"sidebar\">\n            <div className=\"gameMenu\">\n              <div className=\"details\">\n                <GameDifficulty difficulty={game.board.difficulty} />\n                <GameScore totalScore={game.totalPoints} currentRoundScore={game.currentRoundPoints} highScore={highScore} />\n              </div>\n              <div className=\"inputs\">\n                <GameInputMode handleInputModeChange={handleInputModeChange} currentInputMode={inputMode} />\n                <div className=\"controls\">\n                  <Button handleOnClick={handleRestartClick} type=\"secondary\">Start new game</Button>\n                </div>\n              </div>\n            </div>\n            <footer>Created by <a href=\"https://twitter.com/icemaz\" target=\"_blank\" rel=\"noopener noreferrer\">@icemaz</a> - <a href=\"https://github.com/EdwardJFox/voltorb-flip\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a></footer>\n          </div>\n        </React.Fragment>\n      }\n    </div>\n  )\n}\n\nexport default VoltorbFlip;","import React from 'react';\nimport AnimatedNumber from \"animated-number-react\";\n\nimport './GameScore.scss';\n\ninterface GameScoreInterface {\n  totalScore: number;\n  currentRoundScore: number;\n  highScore: number;\n}\n\nconst GameScore = ({ totalScore, currentRoundScore, highScore }: GameScoreInterface) => {\n  const formatScore = (value: number) => Math.round(value);\n\n  return (\n    <div className=\"gameScore\">\n      <div className=\"gameScoreBorder current\">\n        <div className=\"gameScoreInner\">\n          <div className=\"name\">Round points</div>\n          <div className=\"score\">\n            <AnimatedNumber value={currentRoundScore} formatValue={formatScore} />\n          </div>\n        </div>\n      </div>\n      <div className=\"gameScoreBorder total\">\n        <div className=\"gameScoreInner\">\n          <div className=\"name\">Total points</div>\n          <div className=\"score\">\n            <AnimatedNumber value={totalScore} formatValue={formatScore} />\n          </div>\n        </div>\n      </div>\n      <div className=\"gameScoreBorder highScore\">\n        <div className=\"gameScoreInner\">\n          <div className=\"name\">High score</div>\n          <div className=\"score\">\n            <AnimatedNumber value={highScore} formatValue={formatScore} />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default GameScore;","import React from 'react';\n\nimport './GameDifficulty.scss';\n\ninterface GameDifficultyInterface {\n  difficulty: number;\n}\n\nconst GameDifficulty = ({ difficulty }: GameDifficultyInterface) =>\n  <div className=\"gameDifficulty\">\n    <h1>VOLTORB Flip Lvl. {difficulty}</h1>\n  </div>\n\nexport default GameDifficulty;","import React from 'react';\n\nimport './Button.scss';\n\ninterface ButtonInterface {\n  children: any;\n  type?: string;\n  className?: string;\n  handleOnClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nconst Button = ({ children, type, className, handleOnClick }: ButtonInterface) =>\n  <button className={`btn btn-${type} ${className}`} onClick={handleOnClick}>{ children }</button>\n\nexport default Button;","import React from 'react';\nimport { GameState } from '../services/game';\nimport Button from './Button';\n\nimport './GameStateOverlay.scss';\n\nconst Overlay = ({ children, show, className='' }: any) =>\n  <div className={`overlay ${className} ${show ? 'show' : ''}`}>\n    <div className=\"overlayInner\" >\n      { children }\n    </div>\n  </div>\n\nconst GameIntermissionOverlay = ({ handleNextRoundClick }: any) =>\n  <React.Fragment>\n    <h2>Round complete!</h2>\n    <Button handleOnClick={handleNextRoundClick} type=\"primary\">Next round</Button>\n  </React.Fragment>\n\nconst GameRoundLostOverlay = ({ handleNextRoundClick, handleRestartClick }: any) =>\n  <React.Fragment>\n    <h2>Oh no a Voltorb!</h2>\n    <div className=\"btnGroup\">\n      <Button handleOnClick={handleRestartClick} type=\"default\">Restart</Button>\n      <Button handleOnClick={handleNextRoundClick} type=\"primary\">Next round</Button>\n    </div>\n  </React.Fragment>\n\ninterface GameStateOverlayInterface {\n  gameState: GameState;\n  showOverlay: boolean;\n  handleNextRoundClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  handleRestartClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n}\n\nconst GameStateOverlay = ({ showOverlay, gameState, handleNextRoundClick, handleRestartClick }: GameStateOverlayInterface) => {\n  switch(gameState){\n    case GameState.Intermission: {\n      return <Overlay show={showOverlay}><GameIntermissionOverlay handleNextRoundClick={handleNextRoundClick} /></Overlay>\n    }\n    case GameState.RoundLost: {\n      return <Overlay show={showOverlay} className=\"intermission\"><GameRoundLostOverlay handleNextRoundClick={handleNextRoundClick} handleRestartClick={handleRestartClick} /></Overlay>\n    }\n    default: {\n      return null;\n    }\n  }\n}\n\nexport default GameStateOverlay;","import React from 'react';\n\nimport { InputModeEnum } from './VoltorbFlip';\nimport VoltorbMarker from '../images/voltorb_marker.svg';\nimport './GameInputMode.scss';\n\ninterface GameInputModeInterface {\n  currentInputMode: InputModeEnum;\n  handleInputModeChange: (inputMode: InputModeEnum) => void;\n}\n\nconst GameInputMode = ({ currentInputMode, handleInputModeChange }: GameInputModeInterface) => {\n  return(\n    <div className=\"gameInputMode\">\n      <div className=\"markers\">\n        <div\n          className={`marker voltorb ${currentInputMode === InputModeEnum.MarkingVoltorb ? 'selected' : ''}`}\n          onClick={() => handleInputModeChange(InputModeEnum.MarkingVoltorb)}>\n            <img src={VoltorbMarker} alt=\"Voltorb marker\" />\n        </div>\n        <div\n          className={`marker text one ${currentInputMode === InputModeEnum.MarkingOne ? 'selected' : ''}`}\n          onClick={() => handleInputModeChange(InputModeEnum.MarkingOne)}>\n            <span>1</span>\n        </div>\n        <div\n          className={`marker text two ${currentInputMode === InputModeEnum.MarkingTwo ? 'selected' : ''}`}\n          onClick={() => handleInputModeChange(InputModeEnum.MarkingTwo)}>\n            <span>2</span>\n        </div>\n        <div\n          className={`marker text three ${currentInputMode === InputModeEnum.MarkingThree ? 'selected' : ''}`}\n          onClick={() => handleInputModeChange(InputModeEnum.MarkingThree)}>\n            <span>3</span>\n        </div>\n      </div>\n      <div className={`flip ${currentInputMode === InputModeEnum.Flipping ? 'selected' : ''}`} onClick={() => handleInputModeChange(InputModeEnum.Flipping)}>\n        <span>Flip</span>\n      </div>\n    </div>\n  )\n}\n\nexport default GameInputMode;","import React from 'react';\n\nimport VoltorbFlip from './components/VoltorbFlip';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VoltorbFlip />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}